import withAuth from "components/withAuth"
import { useRouter } from "next/router"
import { Button, TextField } from "@mui/material"
import { useState } from "react"
import fetcher from "utils/fetcher"
import Navbar from "components/Navbar"


function addhttps(url) {
  if (!/^(?:f|ht)tps?\:\/\//.test(url)) {
    url = "https://" + url
  }
  return url
}

function removeLastSlash(url) {
  if (url.substring(url.length-1) === "/")
  {
    url = url.substring(0, url.length-1)
  }

  return url
}

function isValidUrl(url) {
  if (url) {
    try {
      new URL(url)
    } catch (e) {
      console.error(e)
      return false
    }
    console.log(url)
    return true
  }
  return true
}

const CreateGit = () => {
  const router = useRouter()
  const { term, courseId } = router.query
  const [gitURL, setGitURL] = useState("")
  const [pat, setPat] = useState("")
  const [loading, setLoading] = useState(false)
  const [invalidPAT, setInvalidPAT] = useState(false)


  const handleChangeGitURL = event => {
    setGitURL(event.target.value)
  }

  const handleChangePat = event => {
    setPat(event.target.value)
  }

  const createConnection = async () => {
    setLoading(true)
    const data = await fetcher(
      `/api/courses/${term}/${courseId}/git/createConnection`,
      {
        gitURL: gitURL,
        pat: pat,
      }
    )
    setLoading(false)

    if (data.courseId) {
      router.push(`/courses/${term}/${courseId}`)
    }
  }

  const createConnectionAndrepo = async () => {
    setLoading(true)
    const data = await fetcher(
      `/api/courses/${term}/${courseId}/git/createConnectionAndRepo`,
      {
        gitURL: removeLastSlash(addhttps(gitURL)),
        pat: pat,
      },
      "POST"
    )
    setLoading(false)

    if (data.courseId) {
      setInvalidPAT(false)
      router.push(`/courses/${term}/${courseId}`)
    }

    if (data.message) {
      console.log(data.message)
      setInvalidPAT(true)
    }
  }


  return (
    <>
      <Navbar pageTitle={"Create connection to Git repo"} courseId={courseId} term={term} />
      <TextField
        id="GitURL"
        label="GitLab base URL"
        value={gitURL}
        error={!isValidUrl(gitURL)}
        errorText={"Invalid Git base URL"}
        onChange={handleChangeGitURL}
      />
      <br />

      <p>To create a GitLab connection, a personal access token (PAT) needs to be generated in your GitLab account. </p>
      <p>When creating your PAT, please make sure to check all available scopes. The expire date can be left blank.</p>
      <p>The PAT can be generated by visiting <a href={`${gitURL || "https://gitlab.stud.idi.ntnu.no"}/-/profile/personal_access_tokens`} >
        the GitLab web site on Personal Access Token that can be found under user settings
      </a>
      </p>

      <TextField
        id="pat"
        label="GitLab personal access token"
        value={pat}
        error={invalidPAT}
        errorText={"Invalid PAT"}
        onChange={handleChangePat}
      />
      <br />
      {/* <Button
        variant="contained"
        color="primary"
        onClick={createConnection}
        disabled={gitURL === "" || pat === "" || loading}
      >
              Create GitConnection
      </Button> */}
      <Button
        variant="contained"
        color="primary"
        onClick={createConnectionAndrepo}
        disabled={gitURL === "" || pat === "" || loading}
      >
              Create GitConnection And create Git Repo
      </Button>
    </>
  )
}

export default withAuth(CreateGit)